import streamlit as st
import joblib
import numpy as np
import tensorflow as tf
import pandas as pd
import time
import matplotlib.pyplot as plt
import seaborn as sns
import xgboost as xgb
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np




# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network
nn_model = tf.keras.models.load_model('mobile_price_model.keras')  # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network ‡∏î‡πâ‡∏ß‡∏¢ Keras

non_apple_model = joblib.load("non_apple_xgboost_model.pkl")
label_encoders_non_apple_model  = joblib.load("non_apple_label_encoders.pkl")

apple_model = joblib.load("apple_xgboost_model.pkl")
label_encoders_apple_model  = joblib.load("apple_label_encoders.pkl")

def predict_mobile_price_xgb(company_name, ram, front_cam, back_cam, processor, battery, screen):
    st.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    time.sleep(1)  # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

    sample_data = {
        'Company Name': [company_name],
        'RAM': [ram],
        'Front Camera': [front_cam],
        'Back Camera': [back_cam],
        'Processor': [processor],
        'Battery Capacity': [battery],
        'Screen Size': [screen]
    }
    df = pd.DataFrame(sample_data)

    expected_columns = ['RAM', 'Battery Capacity', 'Screen Size', 'Front Camera', 'Back Camera', 'Processor', 'Company Name']
    df = df[expected_columns]

    model = apple_model if company_name.lower() == 'apple' else non_apple_model
    encoders = label_encoders_apple_model if company_name.lower() == 'apple' else label_encoders_non_apple_model
    
    try:
        df["Company Name"] = encoders["Company Name"].transform(df["Company Name"])
    except KeyError:
        st.error("Encoder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 'Company Name' ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô label encoders")
        return
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á 'Company Name': {str(e)}")
        return

    if "Processor" in encoders:
        df["Processor"] = df["Processor"].apply(
            lambda x: encoders["Processor"].transform([x])[0] if x in encoders["Processor"].classes_ else 0
        )
    else:
        st.error("Processor encoder not found in label encoders.")
        return None

    X_sample = df[expected_columns]
    progress_bar = st.progress(0)
    for percent_complete in range(1, 101):
        time.sleep(0.01)
        progress_bar.progress(percent_complete)

    price_predictions = model.predict(X_sample)
    st.write(f"Prediction: {price_predictions}")


    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    st.subheader("üìä Price Distribution")

    # ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡∏£‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ
    sample_prices = np.random.normal(price_predictions[0], 2000, 100)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô 100

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô x
    min_price = max(0, int(min(sample_prices) // 500 * 500))  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏•‡∏∞ 500
    max_price = int(max(sample_prices) // 500 * 500 + 500)  
    bins = np.arange(min_price, max_price + 500, 500)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á bin ‡∏•‡∏∞ 500 ‡∏ö‡∏≤‡∏ó

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    fig, ax = plt.subplots(figsize=(10, 6), facecolor="#f4f4f4")  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô
    ax.set_facecolor("#eaeaea")  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á plot

    # ‡∏Æ‡∏¥‡∏™‡πÇ‡∏ï‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    sns.histplot(sample_prices, bins=bins, kde=True, color="#3498db", alpha=0.8, edgecolor="black", ax=ax)
    ax.axvline(price_predictions[0], color='red', linestyle='--', linewidth=2, label=f'Predicted Price: {price_predictions[0]:,.0f} ‡∏ö‡∏≤‡∏ó')

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á Histogram
    for p in ax.patches:
        height = p.get_height()
        if height > 0:
            ax.text(p.get_x() + p.get_width()/2, height + 0.5, f'{int(height)}', ha='center', fontsize=10, fontweight="bold", color="black")

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡πÅ‡∏Å‡∏ô x
    tick_labels = [f"{int(b):,}" for b in bins[:-1]]
    ax.set_xticks(bins[:-1])
    ax.set_xticklabels(tick_labels, rotation=45, fontsize=11, fontweight="bold", fontname="Arial")

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏Å‡∏ô y
    ax.set_yticklabels(ax.get_yticks(), fontsize=11, fontweight="bold", fontname="Arial")

    # ‡πÄ‡∏û‡∏¥‡πà‡∏° Gridlines
    ax.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.7)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏° annotation ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ
    ax.annotate(f'Predicted: {price_predictions[0]:,.0f} ‡∏ö‡∏≤‡∏ó',
                xy=(price_predictions[0], ax.get_ylim()[1]*0.8), 
                xytext=(price_predictions[0] + 1000, ax.get_ylim()[1]*0.9),
                arrowprops=dict(facecolor='red', arrowstyle='->', lw=2),
                fontsize=12, fontweight="bold", color="red")

    # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    ax.set_title("üìà Price Distribution", fontsize=14, fontweight="bold", fontname="Arial")
    ax.set_xlabel("Price (Baht)", fontsize=12, fontweight="bold")
    ax.set_ylabel("Frequency", fontsize=12, fontweight="bold")
    ax.legend()
    sns.despine()

    st.pyplot(fig)

    return price_predictions[0]



import numpy as np
import pandas as pd
import time
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏î‡πâ‡∏ß‡∏¢ Neural Network
def predict_mobile_price_nn(battery_power, blue, clock_speed, dual_sim, fc, four_g, 
                             int_memory, m_dep, mobile_wt, n_cores, pc, px_height, 
                             px_width, ram, sc_h, sc_w, talk_time, three_g, touch_screen, wifi):
    input_data = np.array([[battery_power, blue, clock_speed, dual_sim, fc, four_g, 
                            int_memory, m_dep, mobile_wt, n_cores, pc, px_height, 
                            px_width, ram, sc_h, sc_w, talk_time, three_g, touch_screen, wifi]])  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô (1, 20)

    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
    prediction = nn_model.predict(input_data)
    price_predicted = prediction[0][0]

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    st.subheader("üìä Price Distribution")

    # ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡∏£‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ
    sample_prices = np.random.normal(price_predicted, 2000, 100)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô 100

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô x
    min_price = max(0, int(min(sample_prices) // 500 * 500))  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏•‡∏∞ 500
    max_price = int(max(sample_prices) // 500 * 500 + 500)  
    bins = np.arange(min_price, max_price + 500, 500)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á bin ‡∏•‡∏∞ 500 ‡∏ö‡∏≤‡∏ó

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    fig, ax = plt.subplots(figsize=(10, 6), facecolor="#f4f4f4")  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô
    ax.set_facecolor("#eaeaea")  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á plot

    # ‡∏Æ‡∏¥‡∏™‡πÇ‡∏ï‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    sns.histplot(sample_prices, bins=bins, kde=True, color="#3498db", alpha=0.8, edgecolor="black", ax=ax)
    ax.axvline(price_predicted, color='red', linestyle='--', linewidth=2, label=f'Predicted Price: {price_predicted:,.0f} ‡∏ö‡∏≤‡∏ó')

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á Histogram
    for p in ax.patches:
        height = p.get_height()
        if height > 0:
            ax.text(p.get_x() + p.get_width()/2, height + 0.5, f'{int(height)}', ha='center', fontsize=10, fontweight="bold", color="black")

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡πÅ‡∏Å‡∏ô x
    tick_labels = [f"{int(b):,}" for b in bins[:-1]]
    ax.set_xticks(bins[:-1])
    ax.set_xticklabels(tick_labels, rotation=45, fontsize=11, fontweight="bold", fontname="Arial")

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏Å‡∏ô y
    ax.set_yticklabels(ax.get_yticks(), fontsize=11, fontweight="bold", fontname="Arial")

    # ‡πÄ‡∏û‡∏¥‡πà‡∏° Gridlines
    ax.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.7)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏° annotation ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ
    ax.annotate(f'Predicted: {price_predicted:,.0f} ‡∏ö‡∏≤‡∏ó',
                xy=(price_predicted, ax.get_ylim()[1]*0.8), 
                xytext=(price_predicted + 1000, ax.get_ylim()[1]*0.9),
                arrowprops=dict(facecolor='red', arrowstyle='->', lw=2),
                fontsize=12, fontweight="bold", color="red")

    # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    ax.set_title("üìà Price Distribution", fontsize=14, fontweight="bold", fontname="Arial")
    ax.set_xlabel("Price (Baht)", fontsize=12, fontweight="bold")
    ax.set_ylabel("Frequency", fontsize=12, fontweight="bold")
    ax.legend()
    sns.despine()

    st.pyplot(fig)

    return price_predicted


# UI ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ
def main():
    st.title('Machine Learning & Neural Network Web App')
    menu = ['Home', '‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning','Predict New_Mobile_Price(2020-2025)',  '‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•  Neural Network', 'Predict_Old_Mobile_Price(2000-2010)' , 'About']
    choice = st.sidebar.selectbox('Menu', menu)
    
    if choice == 'Home':
        st.subheader('Project Overview')
        st.write(''' 
            ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ **Neural Network** ‡πÅ‡∏•‡∏∞ **XGBoost** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå, ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ 
            ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô **Streamlit** ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ 
            ‡∏ã‡∏∂‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÅ‡∏≠‡∏Ñ‡∏ó‡∏µ‡∏ü

            ### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
            1. **‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Preparation)**: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ (Features) ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (Target)
            2. **‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (Model Training)**: ‡πÄ‡∏£‡∏≤‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning ‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡πÅ‡∏ö‡∏ö ‡πÄ‡∏ä‡πà‡∏ô Linear Regression, KNN, Logistic Regression, Decision Tree, Random Forest ‡πÅ‡∏•‡∏∞ Neural Network
            3. **‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• (Testing & Evaluation)**: ‡πÄ‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            4. **‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ (Mobile Price Prediction)**: ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö

            ### ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ô‡∏µ‡πâ
            - **Neural Network**: ‡πÉ‡∏ä‡πâ Neural Network ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            - **XGBoost**: ‡πÉ‡∏ä‡πâ XGBoost ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
            - **KNN**: ‡πÉ‡∏ä‡πâ KNN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
            - **Random Forest**: ‡πÉ‡∏ä‡πâ Random Forest ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô

            ### ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            - **Streamlit**: ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
            - **XGBoost**: ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏•‡∏∞‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÑ‡∏î‡πâ
            - **TensorFlow**: ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å Neural Network
            - **scikit-learn**: ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô KNN, Random Forest, Logistic Regression ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
        ''')

        st.write("‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥ Machine Learning ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏°‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢‡∏î‡∏≤‡∏¢")
        st.write("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ")

        # ‡∏™‡πà‡∏ß‡∏ô Predict New Mobile Price (2020-2025) ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ XGBoost
        st.subheader('Predict New Mobile Price (2020-2025) Using XGBoost')
        st.write(''' 
            ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ **XGBoost** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏µ 2020 ‡∏ñ‡∏∂‡∏á 2025 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà, ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠, ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤, ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á, ‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå
            ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• XGBoost ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        ''')
    
    elif choice == 'Predict New_Mobile_Price(2020-2025)':
        st.subheader('‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà (2020-2025)')

        # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        company_name = st.selectbox('Company Name', 
                                    ['Apple', 'Samsung', 'OnePlus', 'Vivo', 'iQOO', 'Oppo', 
                                     'Realme', 'Xiaomi', 'Lenovo', 'Motorola', 'Huawei', 
                                     'Nokia', 'Sony', 'Google', 'Tecno', 'Infinix', 'Honor', 'POCO'])

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå
        if company_name == 'Apple':
            processor = st.selectbox('Processor', ['Apple A11','Apple A12','Apple A12 Z','Apple A13','Apple A14', 'Apple A15', 'Apple A16','Apple A17','Apple A17 pro','Apple A18','Apple A18 pro'])
        else :
            processor = st.selectbox('Processor', [
                                                        'Exynos', 'Snapdragon', 'MediaTek Helio', 'MediaTek', 'MediaTek Dimensity',
                                                        'Unisoc ', 'Spreadtrum ', 'Qualcomm MSM8916', 'Qualcomm Snapdragon',
                                                        'Dimensity', 'Kirin ', 'Google Tensor'
                                                    ])
       
        ram = st.selectbox('RAM (GB)', [1, 2, 3, 4, 6, 8, 12, 16, 32])
        front_cam = st.number_input('Front Camera (MP)', 1, 50, 10)
        back_cam = st.number_input('Back Camera (MP)', 1, 200, 20)
        
        battery = st.selectbox('Battery Capacity (mAh)', [3000, 4000, 5000, 6000 ,7000 ,8000, 9000, 10000, 11000])
        screen = st.number_input('Screen Size (inches)', 6.0, 12.0, 6.7)

        if st.button('‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà'):
            result = predict_mobile_price_xgb(company_name, ram, front_cam, back_cam, processor, battery, screen)
            if result is not None:
                st.success(f'‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {result:.2f} ‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå')
            else:
                st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤")

    elif choice == 'Predict_Old_Mobile_Price(2000-2010)':
        st.subheader('‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ã‡∏∑‡πà‡∏≠ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Å‡πà‡∏≤')
        st.write(""" 
        ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏µ 2000 ‡∏ñ‡∏∂‡∏á 2010 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå, ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™ ‡∏Ø‡∏•‡∏Ø
        ‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
        """)

        # ‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (20 ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå)
        battery_power = st.selectbox('Battery Power (mAh)', [1000, 2000, 3000, 4000, 5000, 6000])
        blue = st.selectbox('Bluetooth Enabled (1 = Yes, 0 = No)', [0, 1])
        clock_speed = st.selectbox('Clock Speed (GHz)', [1.0, 1.5, 2.0, 2.5, 3.0, 3.5])
        dual_sim = st.selectbox('Dual SIM (1 = Yes, 0 = No)', [0, 1])
        fc = st.selectbox('Front Camera (MP)', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 16, 20])
        four_g = st.selectbox('4G Supported (1 = Yes, 0 = No)', [0, 1])
        int_memory = st.selectbox('Internal Memory (GB)', [4, 8, 16, 32, 64])
        storage = int_memory  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î storage ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö int_memory
        m_dep = st.selectbox('Mobile Depth (cm)', [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2])
        mobile_wt = st.selectbox('Mobile Weight (grams)', [100, 150, 200, 250])
        n_cores = st.selectbox('Number of CPU Cores', [1, 2, 4, 6, 8])
        pc = st.selectbox('Primary Camera (MP)', [5, 8, 10, 12, 16, 20, 50])
        px_height = st.selectbox('Pixel Height', [1000, 1500, 2000, 2500, 3000])
        px_width = st.selectbox('Pixel Width', [1000, 1500, 2000, 2500, 3000])
        ram = st.selectbox('RAM (GB)', [1, 2, 4, 8, 16])
        sc_h = st.selectbox('Screen Height (cm)', [5, 6, 7, 8, 9, 10, 12, 14])
        sc_w = st.selectbox('Screen Width (cm)', [5, 6, 7, 8, 9, 10, 12])
        talk_time = st.selectbox('Talk Time (hours)', [5, 10, 15, 20, 25, 30])
        three_g = st.selectbox('3G Supported (1 = Yes, 0 = No)', [0, 1])
        touch_screen = st.selectbox('Touch Screen (1 = Yes, 0 = No)', [0, 1])
        wifi = st.selectbox('Wi-Fi (1 = Yes, 0 = No)', [0, 1])

        if st.button('‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢'):
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
            result = predict_mobile_price_nn(battery_power, blue, clock_speed, dual_sim, fc, 
                                            four_g, int_memory, m_dep, mobile_wt, n_cores, pc, 
                                            px_height, px_width, ram, sc_h, sc_w, talk_time, 
                                            three_g, touch_screen, wifi)
            st.success(f'‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {result:.2f} ‡∏ö‡∏≤‡∏ó')



    elif choice == '‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning':
        st.subheader("‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning (ML)")
        
        st.write("""
             ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ XGBoost ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        """)
        st.write("""  ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å XGBoost ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô (regression) ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (classification) 
        """)

        # ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Imports)
        st.write("### ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Imports):")
        st.code("""
        import xgboost as xgb
        from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
        from sklearn.model_selection import train_test_split
        import pandas as pd
        import numpy as np
        import re
        from sklearn.preprocessing import LabelEncoder
        import joblib
        """)
        
        st.write("‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡πÄ‡∏ä‡πà‡∏ô `xgboost`, `sklearn`, `pandas`, `numpy`, `re`, `joblib` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•, ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß.")

        # ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
        st.write("### ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV:")
        st.code("""
        apple_df = pd.read_csv("apple_mobile_price.csv", encoding='latin1')
        non_apple_df = pd.read_csv("non_apple_mobile_price.csv", encoding='latin1')
        """)
        
        st.write("‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á Apple ‡πÅ‡∏•‡∏∞ Non-Apple ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `pd.read_csv()`")

        # ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏µ 2020-2025
        st.write("### ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏µ 2020-2025:")
        st.code("""
        apple_df = apple_df[apple_df["Launched Year"].astype(str).str[:4].astype(float).between(2020, 2025)].copy()
        non_apple_df = non_apple_df[non_apple_df["Launched Year"].astype(str).str[:4].astype(float).between(2020, 2025)].copy()
        """)
        
        st.write("‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡∏õ‡∏µ 2020-2025 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô `astype()` ‡πÅ‡∏•‡∏∞ `between()`")

        # ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ NaN ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        st.write("### ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ NaN ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:")
        st.code("""
        apple_df.fillna(apple_df.mean(numeric_only=True), inplace=True)
        non_apple_df.fillna(non_apple_df.mean(numeric_only=True), inplace=True)
        """)
        
        st.write("‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ NaN ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏±‡πâ‡∏ô‡πÜ")

        # ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        st.write("### ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        st.code("""
        def clean_battery(value):
            return float(re.sub(r"[^0-9]", "", str(value))) if pd.notnull(value) else np.nan
        def clean_ram(value):
            return int(re.sub(r"[^0-9]", "", str(value))) if pd.notnull(value) else np.nan
        def clean_screen_size(value):
            values = [float(s) for s in re.findall(r"\d+\.?\d*", str(value))]
            return max(values) if values else np.nan
        def clean_camera(value):
            values = [float(v) for v in re.findall(r"\d+\.?\d*", str(value))]
            return max(values) if values else np.nan

        for df in [apple_df, non_apple_df]:
            df["Battery Capacity"] = df["Battery Capacity"].apply(clean_battery)
            df["RAM"] = df["RAM"].apply(clean_ram)
            df["Screen Size"] = df["Screen Size"].apply(clean_screen_size)
            df["Front Camera"] = df["Front Camera"].apply(clean_camera)
            df["Back Camera"] = df["Back Camera"].apply(clean_camera)
        """)
        
        st.write("‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà, RAM, ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")

        # ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        st.write("### ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç:")
        st.code("""
        def encode_features(df):
            label_encoders = {}
            for col in ["Processor", "Company Name"]:
                le = LabelEncoder()
                df[col] = le.fit_transform(df[col])
                label_encoders[col] = le
            return df, label_encoders

        apple_df, apple_encoders = encode_features(apple_df)
        non_apple_df, non_apple_encoders = encode_features(non_apple_df)
        joblib.dump(apple_encoders, "apple_label_encoders.pkl")
        joblib.dump(non_apple_encoders, "non_apple_label_encoders.pkl")
        """)
        
        st.write("‡πÉ‡∏ä‡πâ `LabelEncoder` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡πÄ‡∏ä‡πà‡∏ô `Processor` ‡πÅ‡∏•‡∏∞ `Company Name`) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")

        # ‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Train-Test Split)
        st.write("### ‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Train-Test Split):")
        st.code("""
        X_apple, y_apple = apple_df[features], apple_df["Launched Price (USA)"]
        X_non_apple, y_non_apple = non_apple_df[features], non_apple_df["Launched Price (USA)"]

        X_train_apple, X_test_apple, y_train_apple, y_test_apple = train_test_split(X_apple, y_apple, test_size=0.2, random_state=42)
        X_train_non_apple, X_test_non_apple, y_train_non_apple, y_test_non_apple = train_test_split(X_non_apple, y_non_apple, test_size=0.2, random_state=42)
        """)
        
        st.write("‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö (80% ‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô, 20% ‡∏ó‡∏î‡∏™‡∏≠‡∏ö)")

        # ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• XGBoost
        st.write("### ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• XGBoost:")
        st.code("""
        apple_model = xgb.XGBRegressor(n_estimators=500, learning_rate=0.08, max_depth=5, random_state=42)
        non_apple_model = xgb.XGBRegressor(n_estimators=500, learning_rate=0.08, max_depth=5, random_state=42)
        """)
        
        st.write("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• XGBoost ‡πÇ‡∏î‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (n_estimators), ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ (learning_rate), ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (max_depth)")

        # ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        st.write("### ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•:")
        st.code("""
        apple_model.fit(X_train_apple, y_train_apple)
        non_apple_model.fit(X_train_non_apple, y_train_non_apple)
        """)
        
        st.write("‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô `fit()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô")

        # ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ encoder
        st.write("### ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ encoder:")
        st.code("""
        joblib.dump(apple_model, "apple_xgboost_model.pkl")
        joblib.dump(non_apple_model, "non_apple_xgboost_model.pkl")
        joblib.dump(apple_encoders, "apple_label_encoders.pkl")
        joblib.dump(non_apple_encoders, "non_apple_label_encoders.pkl")
        """)
        
        st.write("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ encoder ‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `joblib.dump()`")

        # ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤
        st.write("### ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤:")
        st.code("""
        def predict_price(sample_data):
            df = pd.DataFrame(sample_data)
            company = df.iloc[0]['Company Name']
            if company == 'Apple':
                model = apple_model
                encoders = apple_encoders
            else:
                model = non_apple_model
                encoders = non_apple_encoders
            df["Processor"] = df["Processor"].apply(lambda x: encoders["Processor"].transform([x])[0] if x in encoders["Processor"].classes_ else 0)
            df["Company Name"] = encoders["Company Name"].transform(df["Company Name"])
            X_sample = df[features]
            return model.predict(X_sample)

        sample_phones = [{'RAM': 6, 'Battery Capacity': 4000, 'Screen Size': 6.7, 'Front Camera': 20, 'Back Camera': 42, 'Company Name': 'Apple', 'Processor': 'Apple A17'}, {'RAM': 8, 'Battery Capacity': 5000, 'Screen Size': 6.7, 'Front Camera': 20, 'Back Camera': 64, 'Company Name': 'Samsung', 'Processor': 'Snapdragon'}]

        for i, phone in enumerate(sample_phones):
            print(f"Prediction for phone {i+1}: ${predict_price([phone])[0]:.2f}")
        """)
        
        st.write("‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (Apple ‡∏´‡∏£‡∏∑‡∏≠ Non-Apple) ‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")


    elif choice == '‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•  Neural Network':
        st.subheader("‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•  Neural Network ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏≠‡∏µ‡∏Å Machine Learning (‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡πÇ‡∏°‡πÄ‡∏î‡∏•)")
        
        st.write("""
        ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡πÅ‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ä‡πà‡∏ô Linear Regression, KNN, Logistic Regression, Decision Tree, Random Forest ‡πÅ‡∏•‡∏∞ Neural Network
        ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        """)

        # ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Imports)
        st.write("### ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Imports):")
        st.code("""
        import pandas as pd
        import numpy as np
        from sklearn.model_selection import train_test_split
        from sklearn.linear_model import LinearRegression
        from sklearn.neighbors import KNeighborsClassifier
        from sklearn.linear_model import LogisticRegression
        from sklearn.tree import DecisionTreeClassifier
        from sklearn.ensemble import RandomForestClassifier
        from sklearn.metrics import classification_report, confusion_matrix
        import joblib
        import tensorflow as tf
        from tensorflow.keras.models import Sequential
        from tensorflow.keras.layers import Dense, Dropout
        from sklearn.preprocessing import StandardScaler
        """)
        
        st.write("‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡πà‡∏ô `pandas`, `numpy`, `sklearn`, `tensorflow` ‡πÅ‡∏•‡∏∞ `joblib` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•")

        # ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
        st.write("### ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV:")
        st.code("""
        dataset = pd.read_csv('C:/Users/kittisak/OneDrive/Documents/AI/web/train.csv')
        """)
        
        st.write("‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV")

        # ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        st.write("### ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        st.code("""
        X = dataset.drop('price_range', axis=1)
        y = dataset['price_range']
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=101)
        scaler = StandardScaler()
        X_train = scaler.fit_transform(X_train)
        X_test = scaler.transform(X_test)
        """)
        
        st.write("‡πÄ‡∏£‡∏≤‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå (X) ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (y) ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ `StandardScaler`")

        # ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Linear Regression
        st.write("### ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Linear Regression:")
        st.code("""
        lm = LinearRegression()
        lm.fit(X_train, y_train)
        lm_score = lm.score(X_test, y_test)
        """)
        
        st.write("‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Linear Regression ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö")

        # ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• KNN
        st.write("### ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• KNN:")
        st.code("""
        knn = KNeighborsClassifier(n_neighbors=10)
        knn.fit(X_train, y_train)
        knn_score = knn.score(X_test, y_test)
        """)
        
        st.write("‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• KNN (k-Nearest Neighbors) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô")

        # ‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ K ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Elbow Method
        st.write("### ‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ K ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (Elbow Method):")
        st.code("""
        error_rate = []
        for i in range(1, 20):
            knn = KNeighborsClassifier(n_neighbors=i)
            knn.fit(X_train, y_train)
            pred_i = knn.predict(X_test)
            error_rate.append(np.mean(pred_i != y_test))
        """)
        
        st.write("‡πÉ‡∏ä‡πâ Elbow Method ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á K ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• KNN")

        # ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Logistic Regression
        st.write("### ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Logistic Regression:")
        st.code("""
        logmodel = LogisticRegression()
        logmodel.fit(X_train, y_train)
        logmodel_score = logmodel.score(X_test, y_test)
        """)
        
        st.write("‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Logistic Regression ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•")

        # ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree
        st.write("### ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree:")
        st.code("""
        dtree = DecisionTreeClassifier()
        dtree.fit(X_train, y_train)
        dtree_score = dtree.score(X_test, y_test)
        """)
        
        st.write("‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•")

        # ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest
        st.write("### ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest:")
        st.code("""
        rfc = RandomForestClassifier(n_estimators=200)
        rfc.fit(X_train, y_train)
        rfc_score = rfc.score(X_test, y_test)
        """)
        
        st.write("‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•")

        # ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å Neural Network
        st.write("### ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å Neural Network:")
        st.code("""
        model = Sequential()
        model.add(Dense(128, input_dim=X_train.shape[1], activation='relu'))
        model.add(Dropout(0.2))
        model.add(Dense(64, activation='relu'))
        model.add(Dropout(0.2))
        model.add(Dense(32, activation='relu'))
        model.add(Dropout(0.2))
        model.add(Dense(1, activation='linear'))

        model.compile(optimizer='adam', loss='mse')
        model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))
        test_loss = model.evaluate(X_test, y_test)
        model.save('mobile_price_model.keras')
        """)
        
        st.write("‡∏™‡∏£‡πâ‡∏≤‡∏á Neural Network ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏ä‡∏±‡πâ‡∏ô‡∏ã‡πà‡∏≠‡∏ô 3 ‡∏ä‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ Dropout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£ Overfitting")

        # ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        st.write("### ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•:")
        st.code("""
        print(f"Linear Regression Score: {lm_score}")
        print(f"KNN Score: {knn_score}")
        print(f"Logistic Regression Score: {logmodel_score}")
        print(f"Decision Tree Score: {dtree_score}")
        print(f"Random Forest Score: {rfc_score}")
        """)
        
        st.write("‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß")

        # ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ KNN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤
        st.write("### ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ KNN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤:")
        st.code("""
        knn_pred = knn.predict(X_test)
        print(classification_report(y_test, knn_pred))
        cm = confusion_matrix(y_test, knn_pred)
        print(cm)
        """)
        
        st.write("‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• KNN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• ‡πÄ‡∏ä‡πà‡∏ô classification report ‡πÅ‡∏•‡∏∞ confusion matrix")

        # ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        st.write("### ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
        st.code("""
        data_test = pd.read_csv('C:/Users/kittisak/OneDrive/Documents/AI/web/test.csv')
        data_test = data_test.drop('id', axis=1)
        predicted_price = knn.predict(data_test)
        data_test['price_range'] = predicted_price
        data_test.to_csv('predicted_test_results.csv', index=False)
        joblib.dump(knn, 'knn_model.pkl')
        """)
        
        st.write("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• KNN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï")
        
    elif choice == 'About':
        st.subheader('üìå About This Project')
        st.write("""
            - This project is developed using **Streamlit** for the frontend interface.
            - It utilizes **Machine Learning** models such as **Linear Regression**, **K-Nearest Neighbors (KNN)**, **Logistic Regression**, **Decision Trees**, **Random Forest**, and **Neural Networks** for mobile price prediction.
            - The project is deployed using **Streamlit**, allowing easy interaction and real-time predictions.
        """)

        st.subheader('üë®‚Äçüíª Developer Information')
        st.write("""
            - **Creator**: **Kittisak Tantrtone** (6604062610021)
            - **Email**: [s6604062610021@email.kmutnb.ac.th](mailto:s6604062610021@email.kmutnb.ac.th)
            - **GitHub**: [A-Phrom-A](https://github.com/A-Phrom-A)
        """)

        st.subheader('üìä Datasets Used')
        st.write("""
            - **Predict Old Mobile Price (2000-2010)**  
            [Dataset Link](https://www.kaggle.com/code/melissamonfared/mobile-price-prediction-eda-classification?select=test.csv)
            - **New Mobile Price Prediction (2020-2025)**  
            [Dataset Link](https://www.kaggle.com/code/hanymato/mobile-price-prediction-model/input)
        """)

        st.write("üí° *Feel free to reach out for inquiries, collaborations, or further details about this project!* üöÄ")



if __name__ == '__main__':
    main()
